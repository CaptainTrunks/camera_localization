/**

\page tutorial-pose-dementhon-opencv Pose from Dementhon's POSIT method
\tableofcontents

\section intro_dementhon_cv Introduction

An alternative and very elegant solution to pose estimation from points has been proposed in \cite DD95 \cite ODD96. This algorithm is called POSIT.

\section dementhon_code_cv Source code

The following source code that uses <a href="opencv.org">OpenCV</a> is also available in \ref pose-dementhon-opencv.cpp file. It allows to compute the pose of the camera from points.

\include pose-dementhon-opencv.cpp

\section dementon_explained_cv Source code explained

First of all we include OpenCV headers that are requested to manipulate vectors and matrices.

\snippet pose-dementhon-opencv.cpp Include

Then we introduce the function that does the pose estimation. It takes as input parameters \f${^w}{\bf X} = (X,Y,Z,1)^T\f$ the 3D coordinates of the points in the world frame and \f${\bf x} = (x,y,1)^T\f$ their normalized coordinates in the image plane. It returns the estimated pose in \e ctw for the translation vector and in \e cRw for the rotation matrix.

\snippet pose-dementhon-opencv.cpp Estimation function

The implementation of the POSIT algorithm is done next. 
\snippet pose-dementhon-opencv.cpp POSIT

After a minimal number of iterations, all the parameters are estimated and can be used to update the value of the homogenous transformation, first in \e ctw for the translation, then in \e cRw for the rotation matrix.

\snippet pose-dementhon-opencv.cpp Update homogeneous matrix

Finally we define the main function in which we will initialize the input data before calling the previous function and computing the pose using Dementhon POSIT algorithm.

\snippet pose-dementhon-opencv.cpp Main function

First in the main we create the data structures that will contain the 3D points coordinates \e wX in the world frame, and their coordinates in the image plane \e x obtained after prerspective projection. Note here that at least 4 non coplanar points are requested to estimate the pose. 

\snippet pose-dementhon-opencv.cpp Create data structures

For our simulation we then initialize the input data from a ground truth pose with the translation in \e ctw_truth and the rotation matrix in \e cRw_truth. 
For each point we set in \e wX[i] the 3D coordinates in the world frame (wX, wY, wZ, 1) and compute in \e cX their 3D coordinates (cX, cY, cZ, 1) in the camera frame. Then in \e x[i] we update their coordinates (x, y) in the image plane, obtained by perspective projection.

\snippet pose-dementhon-opencv.cpp Simulation

From here we have initialized \f${^w}{\bf X} = (X,Y,Z,1)^T\f$ and \f${\bf x} = (x,y,1)^T\f$. We are now ready to call the function that does the pose estimation.

\snippet pose-dementhon-opencv.cpp Call function

\section dementhon_result_cv Resulting pose estimation

If you run the previous code, it we produce the following result that shows that the estimated pose is very close to the ground truth one used to generate the input data:

\code
ctw (ground truth):
[-0.1;
 0.1;
 0.5]
ctw (computed with DLT):
[-0.1070274014258891;
 0.1741233539654255;
 0.5236967119016803]
cRw (ground truth):
[0.7072945483755065, -0.7061704379962989, 0.03252282795827704;
 0.7061704379962989, 0.7036809008245869, -0.07846338199958876;
 0.03252282795827704, 0.07846338199958876, 0.9963863524490802]
cRw (computed with DLT):
[0.6172726698299887, -0.7813181606576134, 0.09228425059326956;
 0.6906596219977137, 0.4249461799313228, -0.5851581245302429;
 0.4179788297943932, 0.4249391234325819, 0.8019325685199985]
\endcode

*/
