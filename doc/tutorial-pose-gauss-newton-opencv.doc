/**

\page tutorial-pose-gauss-newton-opencv Pose from a non-linear minimization method
\tableofcontents

\section intro_pose_gauss_newton_cv Introduction

The "gold-standard" solution to the PnP consists in estimating the six parameters of the transformation \e cTw by minimizing the forward projection error using a Gauss-Newton approach. A complete derivation of this problem is given in \cite CH06.

\section gauss_newton_code_cv Source code

The following source code that uses <a href="http://opencv.org">OpenCV</a> is also available in \ref pose-gauss-newton-opencv.cpp file. It allows to compute the pose of the camera from points.

\include pose-gauss-newton-opencv.cpp

\section gauss_newton_explained_cv Source code explained

First of all we include OpenCV headers that are requested to manipulate vectors and matrices and also to compute the exponential map.

\snippet pose-gauss-newton-opencv.cpp Include

Then we introduce the function that does the pose estimation. It takes as input parameters \f${^w}{\bf X} = (X,Y,Z,1)^T\f$ the 3D coordinates of the points in the world frame and \f${\bf x} = (x,y,1)^T\f$ their normalized coordinates in the image plane. It returns the estimated pose as an homogeneous matrix transformation.

\snippet pose-gauss-newton-opencv.cpp Estimation function

The implementation of the iterative Gauss-Newton minimization process is done next. First, we create the variables used by the algorithm. Since the algorithm needs an initialization, we set an initial value in \e cTw not to far from the solution. Such an initialization could be done using \ref tutorial-pose-dlt-opencv of \ref tutorial-pose-dementhon-opencv approaches. Finally, the estimation is iterated. 

\snippet pose-gauss-newton-opencv.cpp Gauss-Newton

When the residual obtained between two successive iterations can be neglected, we can exit the while loop and return.

Finally we define the main function in which we will initialize the input data before calling the previous function and computing the pose using non linear Gauss-Newton approach.

\snippet pose-gauss-newton-opencv.cpp Main function

First in the main we create the data structures that will contain the 3D points coordinates \e wX in the world frame, their coordinates in the camera frame \e cX and their coordinates in the image plane \e x obtained after prerspective projection. Note here that at least 4 non coplanar points are requested to estimate the pose. 

\snippet pose-gauss-newton-opencv.cpp Create data structures

For our simulation we then initialize the input data from a ground truth pose with the translation in \e ctw_truth and the rotation matrix in \e cRw_truth. 
For each point we set in \e wX[i] the 3D coordinates in the world frame (wX, wY, wZ, 1) and compute in \e cX their 3D coordinates (cX, cY, cZ, 1) in the camera frame. Then in \e x[i] we update their coordinates (x, y) in the image plane, obtained by perspective projection.


\snippet pose-gauss-newton-opencv.cpp Simulation

From here we have initialized \f${^w}{\bf X} = (X,Y,Z,1)^T\f$ and \f${\bf x} = (x,y,1)^T\f$. Since the non-linear minimization method requires a initial value of the pose to estimate we initialize \f${^c}{\bf T}_w\f$ not so far from the solution, in \e ctw for the translation vector and in \e cRw for the rotation vector. 

\snippet pose-gauss-newton-opencv.cpp Set pose initial value

\note In a real application this initialization has to be done using:
- one of the algorithms described in \ref tutorial-pose-dementhon-opencv or \ref tutorial-pose-dlt-opencv when the 3D points of the model are non coplanar
- \ref tutorial-pose-dlt-planar-opencv when the 3D points are coplanar.

We are now ready to call the function that does the pose estimation.

\snippet pose-gauss-newton-opencv.cpp Call function

\section gauss_newton_result_cv Resulting pose estimation

If you run the previous code, it we produce the following result that shows that the estimated pose is equal to the ground truth one used to generate the input data:

\code
ctw (ground truth):
[-0.1;
 0.1;
 0.5]
ctw (from non linear method):
[-0.09999999999999963;
 0.1000000000000001;
 0.5000000000000006]
cRw (ground truth):
[0.7072945483755065, -0.7061704379962989, 0.03252282795827704;
 0.7061704379962989, 0.7036809008245869, -0.07846338199958876;
 0.03252282795827704, 0.07846338199958876, 0.9963863524490802]
cRw (from non linear method):
[0.7072945483755072, -0.7061704379962995, 0.03252282795827719;
 0.7061704379962994, 0.7036809008245862, -0.07846338199958869;
 0.03252282795827711, 0.07846338199958879, 0.9963863524490796]
 \endcode

*/
