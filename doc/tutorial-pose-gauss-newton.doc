/**

\page tutorial-pose-gauss-newton Pose from a non-linear minimization method
\tableofcontents

\section intro Introduction

The "gold-standard" solution to the PnP consists in estimating the six parameters of the transformation cTw by minimizing the forward projection error. A complete derivation of this problem is given in \cite CH06.

\section gauss_newton_code Source code

The following source code also available in pose-gauss-newton.cpp allows to compute the pose of the camera from points.

\include pose-gauss-newton.cpp

\section gauss_newton_explained Source code explained

First of all we inlude the header of the files that are requested to manipulate vectors and matrices.

\snippet pose-gauss-newton.cpp Include

Then we introduce the function that does the pose estimation. It takes as input parameters \f${^w}{\bf X} = (X,Y,Z,1)^T\f$ the 3D coordinates of the points in the world frame and \f${\bf x} = (x,y,1)^T\f$ their normalized coordinates in the image plane. It returns the estimated pose as an homogeneous matrix transformation.

\snippet pose-gauss-newton.cpp Estimation function

The implementation of the iterative Gauss-Newton minimization process is done next. First, we create the variables used by the algorithm. Since the algorithm needs an initialization, we set an initial value in \e cTw not to far from the solution. Such an initialization could be done using \ref tutorial-pose-dlt of \ref tutorial-pose-dementhon approaches. Finally, the estimation is iterated until the residual obtained between two succesive iterations can be neglected. 

\snippet pose-gauss-newton.cpp Gauss-Newton

Finally we define the main() function in which we will initialize the input data before calling the previous function and computing the pose using Dementhon POSIT algorithm.

\snippet pose-dementhon.cpp Main function

First in the main() we create the data structures that will contain the 3D points coordinates \e wX in the world frame, their coordinates in the camera frame \e cX and their coordinates in the image plane \e x obtained after prerspective projection. Note here that at least 4 non coplanar points are requested to estimate the pose. 

\snippet pose-gauss-newton.cpp Create data structures

For our simulation we then initialize the input data from a ground truth pose \e cTw_truth. 
For each point we set the values (cX, cY, cZ) corresponding to the 3D coordinates of the points in the camera frame and their coordinates (x, y) in the image plane.

\snippet pose-gauss-newton.cpp Simulation

From here we have initialized \f${^w}{\bf X} = (X,Y,Z,1)^T\f$ and \f${\bf x} = (x,y,1)^T\f$. Since the non-linear minimization method requires a initial value of the pose to estimate we initialize \f${^c}{\bf T}_w\f$ not so far from the solution.

\snippet pose-gauss-newton.cpp Set pose initial value

\note In a real application this initialization has to be done using:
- one of the algorithms described in \ref tutorial-pose-dementhon or \ref tutorial-pose-dlt when the 3D points of the model are non coplanar
- \ref tutorial-pose-dlt-planar when the 3D points are coplanar.

We are now ready to call the function that does the pose estimation.

\snippet pose-gauss-newton.cpp Call function

\section gauss_newton_result Resulting pose estimation

If you run the previous code, it we produce the following result that shows that the estimated pose is equal to the ground truth one used to generate the input data:

\code
cTw (ground truth):
0.7072945484  -0.706170438  0.03252282796  -0.1  
0.706170438  0.7036809008  -0.078463382  0.1  
0.03252282796  0.078463382  0.9963863524  0.5  
0  0  0  1  
cTw (from non linear method):
0.7072945484  -0.706170438  0.03252282796  -0.1  
0.706170438  0.7036809008  -0.078463382  0.1  
0.03252282796  0.078463382  0.9963863524  0.5  
0  0  0  1 
\endcode

*/
